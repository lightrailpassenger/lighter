{"version":3,"sources":["ResultPage.module.scss","ResultRow.tsx","schemas/ETAResultSchema.tsx","ResultPage.tsx","ResultRow.module.scss"],"names":["module","exports","ResultRow","props","platformId","route","destination","trainLength","time","className","styles","row","Twemoji","code","Array","fill","map","join","schema","yup","shape","of","required","integer","positive","ResultPage","stationId","useParams","useState","result","setResult","useEffect","isIgnored","a","fetch","mode","method","res","json","etaResultSchema","validate","validatedResult","window","location","reload","stationName","useMemo","station","routeData","find","id","nameEn","nameCh","page","platform_list","flatMap","platform_id","route_list","train_length","route_no","time_en","dest_en","LoadingState"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,YAAc,kC,kICsCjDC,MAzBf,SAAmBC,GACjB,IACEC,EAKED,EALFC,WACAC,EAIEF,EAJFE,MACAC,EAGEH,EAHFG,YACAC,EAEEJ,EAFFI,YACAC,EACEL,EADFK,KAGF,OACE,sBAAKC,UAAWC,IAAOC,IAAvB,UACE,sBAAMF,UAAWC,IAAON,WAAxB,SAAqCA,IACrC,uBAAMK,UAAWC,IAAOL,MAAxB,UAAgCA,EACP,kBAAhBE,EACL,cAACK,EAAA,EAAD,CAASC,KACP,IAAIC,MAAMP,GAAaQ,KAAK,GAAGC,KAAI,iBAAO,kBAAcC,KAAK,MAE/DV,KAEJ,sBAAME,UAAWC,IAAOJ,YAAxB,SAAsCA,IACtC,sBAAMG,UAAWC,IAAOF,KAAxB,SAA+BA,Q,SCPtBU,EAbAC,MAAaC,MAAM,CAChC,cAAiBD,MAAYE,GAAGF,MAAaC,MAAM,CACjD,YAAeD,MAAaG,WAC5B,WAAcH,MAAYE,GAAGF,MAAaC,MAAM,CAC9C,aAAgBD,MAAaI,UAAUC,WAAWF,WAClD,SAAYH,MAAaG,WACzB,QAAWH,MAAaG,WACxB,QAAWH,MAAaG,aACvBA,YAAYA,aACdA,YAAYA,aACdA,W,0BCoDYG,UA7Df,WACE,IAAQC,EAAcC,cAAdD,UAER,EAA4BE,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,IAAIC,GAAY,EAehB,OAdA,sBAAC,gCAAAC,EAAA,+EAEqBC,MAAM,GAAD,OAXT,uEAWS,OAAoBR,GAAa,CAAES,KAAM,OAAQC,OAAQ,QAFnF,cAESC,EAFT,gBAGwBA,EAAIC,OAH5B,cAGST,EAHT,gBAIiCU,EAAgBC,SAASX,GAJ1D,OAISY,EAJT,OAMQT,GACHF,EAAUW,GAPf,kDAUGC,OAAOC,SAASC,SAVnB,yDAAD,GAcO,WACLZ,GAAY,KAEb,CAACN,IAEJ,IAAMmB,EAAcC,mBAAQ,WAC1B,IAAMC,EAAUC,EAAUC,MAAK,qBAAGC,KAAiBxB,KACnD,OAAOqB,EAAO,UAAMA,EAAQI,OAAd,YAAwBJ,EAAQK,QAAW,KACxD,CAAC1B,IAEJ,OACE,sBAAKjB,UAAWC,IAAO2C,KAAvB,UACE,oBAAI5C,UAAWC,IAAOmC,YAAtB,SAAoCA,IACpC,cAAC,EAAD,CACEzC,WAAW,WACXG,YAAY,GACZF,MAAM,QACNG,KAAK,mBACLF,YAAY,gBAGZuB,EACEA,EAAOyB,cAAcC,SAAQ,YAAkC,IAA/BC,EAA8B,EAA9BA,YAC9B,OAD4D,EAAjBC,WACzBF,SAAQ,gBAAGG,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,SAAUC,EAA3B,EAA2BA,QAASC,EAApC,EAAoCA,QAApC,OACxB,cAAC,EAAD,CAEEzD,WAAYoD,EACZjD,YAAamD,EACbrD,MAAOsD,EACPnD,KAAMoD,EACNtD,YAAauD,GANf,UACUL,EADV,YACyBE,EADzB,YACyCC,EADzC,YACqDC,EADrD,YACgEC,UASpE,cAACC,EAAA,EAAD,S,mBCrEV9D,EAAOC,QAAU,CAAC,IAAM,uBAAuB,WAAa,8BAA8B,MAAQ,yBAAyB,YAAc,+BAA+B,KAAO","file":"static/js/5.01263203.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"ResultPage_page__3ySjD\",\"stationName\":\"ResultPage_stationName__39vU4\"};","import React from \"react\";\n\nimport Twemoji from \"./Twemoji\";\n\nimport styles from \"./ResultRow.module.scss\";\n\ninterface ResultRowProps {\n  platformId: string | number;\n  route: string;\n  destination: string;\n  trainLength: string | number;\n  time: string;\n}\n\nfunction ResultRow(props: ResultRowProps) {\n  const {\n    platformId,\n    route,\n    destination,\n    trainLength,\n    time,\n  } = props;\n\n  return (\n    <div className={styles.row}>\n      <span className={styles.platformId}>{platformId}</span>\n      <span className={styles.route}>{route}{\n        typeof trainLength === \"number\" ?\n          <Twemoji code={\n            new Array(trainLength).fill(0).map(() => ('\\u{1f68b}')).join('')\n          } /> :\n          trainLength\n      }</span>\n      <span className={styles.destination}>{destination}</span>\n      <span className={styles.time}>{time}</span>\n    </div>\n  );\n}\n\nexport default ResultRow;\n","import * as yup from \"yup\";\n\ntype ETAResultType = {\n  \"platform_list\": Array<{\n    \"platform_id\": number;\n    \"route_list\": Array<{\n      \"train_length\": number,\n      \"route_no\": string,\n      \"time_en\": string,\n      \"dest_en\": string,\n    }>\n  }>;\n};\n\nconst schema = yup.object().shape({\n  \"platform_list\": yup.array().of(yup.object().shape({\n    \"platform_id\": yup.number().required(),\n    \"route_list\": yup.array().of(yup.object().shape({\n      \"train_length\": yup.number().integer().positive().required(),\n      \"route_no\": yup.string().required(),\n      \"time_en\": yup.string().required(),\n      \"dest_en\": yup.string().required(),\n    }).required()).required(),\n  }).required()).required(),\n}).required();\n\nexport type { ETAResultType };\nexport default schema;\n","import React, { useEffect, useMemo, useState } from \"react\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport LoadingState from \"./LoadingState\";\nimport ResultRow from \"./ResultRow\";\n\nimport etaResultSchema, { ETAResultType } from \"./schemas/ETAResultSchema\";\n\nimport routeData from \"./route_data.json\";\n\nimport styles from \"./ResultPage.module.scss\";\n\nconst DATA_ENDPOINT = \"https://rt.data.gov.hk/v1/transport/mtr/lrt/getSchedule?station_id=\";\n\nfunction ResultPage() {\n  const { stationId } = useParams();\n\n  const [result, setResult] = useState<ETAResultType | undefined>();\n\n  useEffect(() => {\n    let isIgnored = false;\n    (async () => {\n      try {\n        const res = await fetch(`${DATA_ENDPOINT}${stationId}`, { mode: 'cors', method: 'GET' });\n        const result = await res.json();\n        const validatedResult = await etaResultSchema.validate(result);\n\n        if (!isIgnored) {\n          setResult(validatedResult);\n        }\n      } catch {\n        window.location.reload();\n      }\n    })();\n\n    return () => {\n      isIgnored = true;\n    };\n  }, [stationId]);\n\n  const stationName = useMemo(() => {\n    const station = routeData.find(({ id }) => (id === stationId));\n    return station ? `${station.nameEn} ${station.nameCh}` : '';\n  }, [stationId]);\n\n  return (\n    <div className={styles.page}>\n      <h3 className={styles.stationName}>{stationName}</h3>\n      <ResultRow\n        platformId=\"Platform\"\n        trainLength=\"\"\n        route=\"Route\"\n        time=\"Time of arrivals\"\n        destination=\"Destination\"\n      />\n      {\n        result ?\n          result.platform_list.flatMap(({ platform_id, route_list }) => {\n            return route_list.flatMap(({ train_length, route_no, time_en, dest_en }) => (\n              <ResultRow\n                key={`${platform_id}-${train_length}-${route_no}-${time_en}-${dest_en}`}\n                platformId={platform_id}\n                trainLength={train_length}\n                route={route_no}\n                time={time_en}\n                destination={dest_en}\n              />\n            ));\n          }) :\n          <LoadingState />\n      }\n    </div>\n  );\n}\n\nexport default ResultPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"ResultRow_row__2f4S9\",\"platformId\":\"ResultRow_platformId__HU7X0\",\"route\":\"ResultRow_route__LRm5F\",\"destination\":\"ResultRow_destination__3LOX7\",\"time\":\"ResultRow_time__1ilG1\"};"],"sourceRoot":""}