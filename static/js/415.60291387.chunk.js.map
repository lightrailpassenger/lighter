{"version":3,"file":"static/js/415.60291387.chunk.js","mappings":"uLACA,QAAsB,uBAAtB,EAA0D,8BAA1D,EAAgG,yBAAhG,EAAuI,+BAAvI,EAA6K,wB,aCsC7K,QAzBA,SAAmBA,GACjB,MAAM,WACJC,EAAU,MACVC,EAAK,YACLC,EAAW,YACXC,EAAW,KACXC,GACEL,EAEJ,OACEM,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAWC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,QAAMH,UAAWC,EAAkBC,SAAER,KACrCK,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAaC,SAAA,CAAEP,EACP,kBAAhBE,GACLM,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,KACP,IAAIC,MAAMT,GAAaU,KAAK,GAAGC,KAAI,IAAO,iBAAcC,KAAK,MAE/DZ,MAEJM,EAAAA,EAAAA,KAAA,QAAMH,UAAWC,EAAmBC,SAAEN,KACtCO,EAAAA,EAAAA,KAAA,QAAMH,UAAWC,EAAYC,SAAEJ,MAGrC,E,cCvBA,MAaA,EAbeY,EAAAA,KAAaC,MAAM,CAChC,cAAiBD,EAAAA,KAAYE,GAAGF,EAAAA,KAAaC,MAAM,CACjD,YAAeD,EAAAA,KAAaG,WAC5B,WAAcH,EAAAA,KAAYE,GAAGF,EAAAA,KAAaC,MAAM,CAC9C,aAAgBD,EAAAA,KAAaI,UAAUC,WAAWF,WAClD,SAAYH,EAAAA,KAAaG,WACzB,QAAWH,EAAAA,KAAaG,WACxB,QAAWH,EAAAA,KAAaG,aACvBA,YAAYA,aACdA,YAAYA,aACdA,W,cCvBH,QAAuB,yBAAvB,EAA8D,gCCgF9D,QAlEA,WACE,MAAM,UAAEG,IAAcC,EAAAA,EAAAA,MAEfC,EAAQC,IAAaC,EAAAA,EAAAA,aAE5BC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAK,IAAIC,iBACT,OAAEC,GAAWF,EACnB,IAAIG,EAAa,EACjB,MAAMC,EAAMC,UACV,IACE,MAAMC,QAAYC,MAAM,sEAAmBb,IAAa,CAAEc,KAAM,OAAQC,OAAQ,MAAOP,WACjFN,QAAeU,EAAII,OACnBC,QAAwBC,EAAgBC,SAASjB,GAElDM,EAAOY,SACVjB,EAAUc,EAEd,CAAE,MACIR,IAAe,GACjBC,GAEJ,GAIF,OAFAA,IAEO,KACLJ,EAAGe,OAAO,CACX,GACA,CAACrB,IAEJ,MAAMsB,GAAcC,EAAAA,EAAAA,UAAQ,KAC1B,MAAMC,EAAUC,EAAUC,MAAK,EAAGC,QAAUA,IAAO3B,IACnD,OAAOwB,EAAU,GAAGA,EAAQI,UAAUJ,EAAQK,SAAW,EAAE,GAC1D,CAAC7B,IAEJ,OACEjB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAYC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAmBC,SAAEoC,KACpCnC,EAAAA,EAAAA,KAAC2C,EAAS,CACRpD,WAAW,WACXG,YAAY,GACZF,MAAM,QACNG,KAAK,mBACLF,YAAY,gBAGZsB,EACEA,EAAO6B,cAAcC,SAAQ,EAAGC,cAAaC,gBACpCA,EAAWF,SAAQ,EAAGG,eAAcC,WAAUC,UAASC,cAC5DnD,EAAAA,EAAAA,KAAC2C,EAAS,CAERpD,WAAYuD,EACZpD,YAAasD,EACbxD,MAAOyD,EACPtD,KAAMuD,EACNzD,YAAa0D,GALR,GAAGL,KAAeE,KAAgBC,KAAYC,KAAWC,UASpEnD,EAAAA,EAAAA,KAACoD,EAAAA,EAAY,MAIvB,C","sources":["webpack://lighter/./src/ResultRow.module.scss?5fe9","ResultRow.tsx","schemas/ETAResultSchema.tsx","webpack://lighter/./src/ResultPage.module.scss?ffa8","ResultPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"row\":\"ResultRow_row__AedA6\",\"platformId\":\"ResultRow_platformId__ofzCA\",\"route\":\"ResultRow_route__mmKQe\",\"destination\":\"ResultRow_destination__wgXIt\",\"time\":\"ResultRow_time__kfFOt\"};","import React from \"react\";\n\nimport Twemoji from \"./Twemoji\";\n\nimport styles from \"./ResultRow.module.scss\";\n\ninterface ResultRowProps {\n  platformId: string | number;\n  route: string;\n  destination: string;\n  trainLength: string | number;\n  time: string;\n}\n\nfunction ResultRow(props: ResultRowProps) {\n  const {\n    platformId,\n    route,\n    destination,\n    trainLength,\n    time,\n  } = props;\n\n  return (\n    <div className={styles.row}>\n      <span className={styles.platformId}>{platformId}</span>\n      <span className={styles.route}>{route}{\n        typeof trainLength === \"number\" ?\n          <Twemoji code={\n            new Array(trainLength).fill(0).map(() => ('\\u{1f68b}')).join('')\n          } /> :\n          trainLength\n      }</span>\n      <span className={styles.destination}>{destination}</span>\n      <span className={styles.time}>{time}</span>\n    </div>\n  );\n}\n\nexport default ResultRow;\n","import * as yup from \"yup\";\n\ntype ETAResultType = {\n  \"platform_list\": Array<{\n    \"platform_id\": number;\n    \"route_list\": Array<{\n      \"train_length\": number,\n      \"route_no\": string,\n      \"time_en\": string,\n      \"dest_en\": string,\n    }>\n  }>;\n};\n\nconst schema = yup.object().shape({\n  \"platform_list\": yup.array().of(yup.object().shape({\n    \"platform_id\": yup.number().required(),\n    \"route_list\": yup.array().of(yup.object().shape({\n      \"train_length\": yup.number().integer().positive().required(),\n      \"route_no\": yup.string().required(),\n      \"time_en\": yup.string().required(),\n      \"dest_en\": yup.string().required(),\n    }).required()).required(),\n  }).required()).required(),\n}).required();\n\nexport type { ETAResultType };\nexport default schema;\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"ResultPage_page__T61dZ\",\"stationName\":\"ResultPage_stationName__GUkcM\"};","import React, { useEffect, useMemo, useState } from \"react\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport LoadingState from \"./LoadingState\";\nimport ResultRow from \"./ResultRow\";\n\nimport etaResultSchema, { ETAResultType } from \"./schemas/ETAResultSchema\";\n\nimport routeData from \"./route_data.json\";\n\nimport styles from \"./ResultPage.module.scss\";\n\nconst DATA_ENDPOINT = \"https://rt.data.gov.hk/v1/transport/mtr/lrt/getSchedule?station_id=\";\n\nfunction ResultPage() {\n  const { stationId } = useParams();\n\n  const [result, setResult] = useState<ETAResultType | undefined>();\n\n  useEffect(() => {\n    const ac = new AbortController();\n    const { signal } = ac;\n    let retryCount = 0;\n    const run = async () => {\n      try {\n        const res = await fetch(`${DATA_ENDPOINT}${stationId}`, { mode: 'cors', method: 'GET', signal });\n        const result = await res.json();\n        const validatedResult = await etaResultSchema.validate(result);\n\n        if (!signal.aborted) {\n          setResult(validatedResult);\n        }\n      } catch {\n        if (retryCount++ < 5) {\n          run();\n        }\n      }\n    };\n    run();\n\n    return () => {\n      ac.abort();\n    };\n  }, [stationId]);\n\n  const stationName = useMemo(() => {\n    const station = routeData.find(({ id }) => (id === stationId));\n    return station ? `${station.nameEn} ${station.nameCh}` : '';\n  }, [stationId]);\n\n  return (\n    <div className={styles.page}>\n      <h3 className={styles.stationName}>{stationName}</h3>\n      <ResultRow\n        platformId=\"Platform\"\n        trainLength=\"\"\n        route=\"Route\"\n        time=\"Time of arrivals\"\n        destination=\"Destination\"\n      />\n      {\n        result ?\n          result.platform_list.flatMap(({ platform_id, route_list }) => {\n            return route_list.flatMap(({ train_length, route_no, time_en, dest_en }) => (\n              <ResultRow\n                key={`${platform_id}-${train_length}-${route_no}-${time_en}-${dest_en}`}\n                platformId={platform_id}\n                trainLength={train_length}\n                route={route_no}\n                time={time_en}\n                destination={dest_en}\n              />\n            ));\n          }) :\n          <LoadingState />\n      }\n    </div>\n  );\n}\n\nexport default ResultPage;\n"],"names":["props","platformId","route","destination","trainLength","time","_jsxs","className","styles","children","_jsx","Twemoji","code","Array","fill","map","join","yup","shape","of","required","integer","positive","stationId","useParams","result","setResult","useState","useEffect","ac","AbortController","signal","retryCount","run","async","res","fetch","mode","method","json","validatedResult","etaResultSchema","validate","aborted","abort","stationName","useMemo","station","routeData","find","id","nameEn","nameCh","ResultRow","platform_list","flatMap","platform_id","route_list","train_length","route_no","time_en","dest_en","LoadingState"],"sourceRoot":""}